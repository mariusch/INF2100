   1:  
   2: /* This program prints all primes less than 1000 
   3:    using a technique called "The sieve of Eratosthenes". */ 
   4:  
   5: program Primes; 
Parser:   <program>
   6:  
   7: const Limit = 1000; 
Parser:     <block>
Parser:       <const decl part>
Parser:         <const decl>
Parser:           <constant>
Parser:             <unsigned constant>
Parser:               <number literal>
   8:  
   9: var prime : array [2..Limit] of Boolean; 
Parser:               </number literal>
Parser:             </unsigned constant>
Parser:           </constant>
Parser:         </const decl>
Parser:       </const decl part>
Parser:       <var decl part>
Parser:         <var decl>
Parser:           <type>
Parser:             <array type>
Parser:               <constant>
Parser:                 <unsigned constant>
Parser:                   <number literal>
Parser:                   </number literal>
Parser:                 </unsigned constant>
Parser:               </constant>
Parser:               <constant>
Parser:                 <unsigned constant>
Parser:                   <named-const>
Parser:                   </named-const>
Parser:                 </unsigned constant>
Parser:               </constant>
Parser:               <type>
Parser:                 <type name>
  10:     i	  : integer; 
Parser:                 </type name>
Parser:               </type>
Parser:             </array type>
Parser:           </type>
Parser:         </var decl>
Parser:         <var decl>
Parser:           <type>
Parser:             <type name>
  11:  
  12: procedure FindPrimes; 
Parser:             </type name>
Parser:           </type>
Parser:         </var decl>
Parser:       </var decl part>
Parser:       <proc decl>
  13: var i1 : integer; 
Parser:         <block>
Parser:           <var decl part>
Parser:             <var decl>
Parser:               <type>
Parser:                 <type name>
  14:     I2 : Integer; 
Parser:                 </type name>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <type name>
  15: begin 
Parser:                 </type name>
Parser:               </type>
  16:    i1 := 2; 
Parser:             </var decl>
Parser:           </var decl part>
Parser:           <statm list>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  17:    while i1 <= Limit do 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <while-statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <rel opr>
Parser:                   </rel opr>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
  18:    begin 
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
  19:       i2 := 2*i1; 
Parser:                 <statement>
Parser:                   <compound statm>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <assign statm>
Parser:                           <variable>
Parser:                           </variable>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor opr>
Parser:                                 </factor opr>
Parser:                                 <factor>
Parser:                                   <variable>
  20:       while i2 <= Limit do 
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </assign statm>
Parser:                       </statement>
Parser:                       <statement>
Parser:                         <while-statm>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                             <rel opr>
Parser:                             </rel opr>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
  21:       begin 
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
  22: 	 prime[i2] := false; 
Parser:                           <statement>
Parser:                             <compound statm>
Parser:                               <statm list>
Parser:                                 <statement>
Parser:                                   <assign statm>
Parser:                                     <variable>
Parser:                                       <expression>
Parser:                                         <simple expr>
Parser:                                           <term>
Parser:                                             <factor>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </factor>
Parser:                                           </term>
Parser:                                         </simple expr>
Parser:                                       </expression>
Parser:                                     </variable>
Parser:                                     <expression>
Parser:                                       <simple expr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <variable>
  23: 	 i2 := i2+i1 
Parser:                                             </variable>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </simple expr>
Parser:                                     </expression>
Parser:                                   </assign statm>
Parser:                                 </statement>
Parser:                                 <statement>
Parser:                                   <assign statm>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                     <expression>
Parser:                                       <simple expr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                         <term opr>
  24:       end; 
Parser:                                         </term opr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </simple expr>
Parser:                                     </expression>
Parser:                                   </assign statm>
Parser:                                 </statement>
Parser:                               </statm list>
  25:       i1 := i1 + 1 
Parser:                             </compound statm>
Parser:                           </statement>
Parser:                         </while-statm>
Parser:                       </statement>
Parser:                       <statement>
Parser:                         <assign statm>
Parser:                           <variable>
Parser:                           </variable>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <term opr>
  26:    end 
Parser:                               </term opr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
  27: end; {FindPrimes} 
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </assign statm>
Parser:                       </statement>
Parser:                     </statm list>
Parser:                   </compound statm>
Parser:                 </statement>
Parser:               </while-statm>
Parser:             </statement>
Parser:           </statm list>
  28:  
  29: procedure P4 (x	: integer); 
Parser:         </block>
Parser:       </proc decl>
Parser:       <proc decl>
Parser:         <param decl list>
Parser:           <param decl>
Parser:             <type name>
Parser:             </type name>
Parser:           </param decl>
  30: begin 
Parser:         </param decl list>
  31:    if x < 1000 then write(' '); 
Parser:         <block>
Parser:           <statm list>
Parser:             <statement>
Parser:               <if-statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <rel opr>
Parser:                   </rel opr>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:                 <statement>
Parser:                   <proc call>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <char literal>
Parser:                               </char literal>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
  32:    if x <  100 then write(' '); 
Parser:                   </proc call>
Parser:                 </statement>
Parser:               </if-statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <if-statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <rel opr>
Parser:                   </rel opr>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:                 <statement>
Parser:                   <proc call>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <char literal>
Parser:                               </char literal>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
  33:    if x <   10 then write(' '); 
Parser:                   </proc call>
Parser:                 </statement>
Parser:               </if-statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <if-statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <rel opr>
Parser:                   </rel opr>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:                 <statement>
Parser:                   <proc call>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <char literal>
Parser:                               </char literal>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
  34:    write(x); 
Parser:                   </proc call>
Parser:                 </statement>
Parser:               </if-statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <proc call>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
  35: end; {P4} 
Parser:               </proc call>
Parser:             </statement>
Parser:             <statement>
Parser:               <empty statm>
Parser:               </empty statm>
Parser:             </statement>
Parser:           </statm list>
  36:  
  37: procedure PrintPrimes; 
Parser:         </block>
Parser:       </proc decl>
Parser:       <proc decl>
  38: var i	     : integer; 
Parser:         <block>
Parser:           <var decl part>
Parser:             <var decl>
Parser:               <type>
Parser:                 <type name>
  39:     NPrinted : integer; 
Parser:                 </type name>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <type name>
  40: begin 
Parser:                 </type name>
Parser:               </type>
  41:    i := 2;  NPrinted := 0; 
Parser:             </var decl>
Parser:           </var decl part>
Parser:           <statm list>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  42:    while i <= Limit do 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <while-statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <rel opr>
Parser:                   </rel opr>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
  43:    begin 
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
  44:       if prime[i] then 
Parser:                 <statement>
Parser:                   <compound statm>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <if-statm>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                     <expression>
Parser:                                       <simple expr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </simple expr>
Parser:                                     </expression>
  45:       begin 
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
  46: 	 if (NPrinted > 0) and (NPrinted mod 10 = 0) then write(eol); 
Parser:                           <statement>
Parser:                             <compound statm>
Parser:                               <statm list>
Parser:                                 <statement>
Parser:                                   <if-statm>
Parser:                                     <expression>
Parser:                                       <simple expr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <inner expr>
Parser:                                               <expression>
Parser:                                                 <simple expr>
Parser:                                                   <term>
Parser:                                                     <factor>
Parser:                                                       <variable>
Parser:                                                       </variable>
Parser:                                                     </factor>
Parser:                                                   </term>
Parser:                                                 </simple expr>
Parser:                                                 <rel opr>
Parser:                                                 </rel opr>
Parser:                                                 <simple expr>
Parser:                                                   <term>
Parser:                                                     <factor>
Parser:                                                       <unsigned constant>
Parser:                                                         <number literal>
Parser:                                                         </number literal>
Parser:                                                       </unsigned constant>
Parser:                                                     </factor>
Parser:                                                   </term>
Parser:                                                 </simple expr>
Parser:                                               </expression>
Parser:                                             </inner expr>
Parser:                                           </factor>
Parser:                                           <factor opr>
Parser:                                           </factor opr>
Parser:                                           <factor>
Parser:                                             <inner expr>
Parser:                                               <expression>
Parser:                                                 <simple expr>
Parser:                                                   <term>
Parser:                                                     <factor>
Parser:                                                       <variable>
Parser:                                                       </variable>
Parser:                                                     </factor>
Parser:                                                     <factor opr>
Parser:                                                     </factor opr>
Parser:                                                     <factor>
Parser:                                                       <unsigned constant>
Parser:                                                         <number literal>
Parser:                                                         </number literal>
Parser:                                                       </unsigned constant>
Parser:                                                     </factor>
Parser:                                                   </term>
Parser:                                                 </simple expr>
Parser:                                                 <rel opr>
Parser:                                                 </rel opr>
Parser:                                                 <simple expr>
Parser:                                                   <term>
Parser:                                                     <factor>
Parser:                                                       <unsigned constant>
Parser:                                                         <number literal>
Parser:                                                         </number literal>
Parser:                                                       </unsigned constant>
Parser:                                                     </factor>
Parser:                                                   </term>
Parser:                                                 </simple expr>
Parser:                                               </expression>
Parser:                                             </inner expr>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </simple expr>
Parser:                                     </expression>
Parser:                                     <statement>
Parser:                                       <proc call>
Parser:                                         <expression>
Parser:                                           <simple expr>
Parser:                                             <term>
Parser:                                               <factor>
Parser:                                                 <variable>
Parser:                                                 </variable>
Parser:                                               </factor>
Parser:                                             </term>
Parser:                                           </simple expr>
Parser:                                         </expression>
  47: 	 P4(i);  NPrinted := NPrinted + 1; 
Parser:                                       </proc call>
Parser:                                     </statement>
Parser:                                   </if-statm>
Parser:                                 </statement>
Parser:                                 <statement>
Parser:                                   <proc call>
Parser:                                     <expression>
Parser:                                       <simple expr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </simple expr>
Parser:                                     </expression>
Parser:                                   </proc call>
Parser:                                 </statement>
Parser:                                 <statement>
Parser:                                   <assign statm>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                     <expression>
Parser:                                       <simple expr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                         <term opr>
Parser:                                         </term opr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <unsigned constant>
Parser:                                               <number literal>
  48:       end; 
Parser:                                               </number literal>
Parser:                                             </unsigned constant>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </simple expr>
Parser:                                     </expression>
Parser:                                   </assign statm>
Parser:                                 </statement>
Parser:                                 <statement>
Parser:                                   <empty statm>
Parser:                                   </empty statm>
Parser:                                 </statement>
Parser:                               </statm list>
  49:       i := i + 1; 
Parser:                             </compound statm>
Parser:                           </statement>
Parser:                         </if-statm>
Parser:                       </statement>
Parser:                       <statement>
Parser:                         <assign statm>
Parser:                           <variable>
Parser:                           </variable>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <term opr>
Parser:                               </term opr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
  50:    end; 
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </assign statm>
Parser:                       </statement>
Parser:                       <statement>
Parser:                         <empty statm>
Parser:                         </empty statm>
Parser:                       </statement>
Parser:                     </statm list>
  51:    write(eol) 
Parser:                   </compound statm>
Parser:                 </statement>
Parser:               </while-statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <proc call>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
  52: end; {PrintPrimes} 
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </proc call>
Parser:             </statement>
Parser:           </statm list>
  53:  
  54: begin {main program} 
Parser:         </block>
  55:    i := 2; 
Parser:       </proc decl>
Parser:       <statm list>
Parser:         <statement>
Parser:           <assign statm>
Parser:             <variable>
Parser:             </variable>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned constant>
Parser:                       <number literal>
  56:    while i <= Limit do begin prime[i] := true;  i := i+1 end; 
Parser:                       </number literal>
Parser:                     </unsigned constant>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:           </assign statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <while-statm>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:               <rel opr>
Parser:               </rel opr>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:             <statement>
Parser:               <compound statm>
Parser:                 <statm list>
Parser:                   <statement>
Parser:                     <assign statm>
Parser:                       <variable>
Parser:                         <expression>
Parser:                           <simple expr>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </simple expr>
Parser:                         </expression>
Parser:                       </variable>
Parser:                       <expression>
Parser:                         <simple expr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </simple expr>
Parser:                       </expression>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign statm>
Parser:                       <variable>
Parser:                       </variable>
Parser:                       <expression>
Parser:                         <simple expr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </factor>
Parser:                           </term>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <unsigned constant>
Parser:                                 <number literal>
Parser:                                 </number literal>
Parser:                               </unsigned constant>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </simple expr>
Parser:                       </expression>
Parser:                     </assign statm>
Parser:                   </statement>
Parser:                 </statm list>
  57:  
  58:    /* Find and print the primes: */ 
  59:    FindPrimes;  PrintPrimes; 
Parser:               </compound statm>
Parser:             </statement>
Parser:           </while-statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <proc call>
Parser:           </proc call>
Parser:         </statement>
Parser:         <statement>
Parser:           <proc call>
  60: end. {main program} 
Parser:           </proc call>
Parser:         </statement>
Parser:         <statement>
Parser:           <empty statm>
Parser:           </empty statm>
Parser:         </statement>
Parser:       </statm list>
Parser:     </block>
Parser:   </program>
program primes;
const 
limit = 1000

;

var prime : array[2

..limit

]ofboolean

;

i : integer
;

procedure procedure findprimes;var i1 : integer
;

i2 : integer
;

begin
  i1
   := 2

  ;
  while i1
   <= limit
   do begin
i2
   := 2
  multiplyToken
  i1

  ;
  while i2
   <= limit
   do begin
prime
  [i2
  ]
   := false

  ;
  i2
   := i2
   + i1


  end
  ;
  i1
   := i1
   + 1


  end

end
;
procedure procedure p4(x:integer

;)
;begin
  if x
   < 1000
  then
  write(' '
  )

  ;
  if x
   < 100
  then
  write(' '
  )

  ;
  if x
   < 10
  then
  write(' '
  )

  ;
  write(x
  )
  ;

end
;
procedure procedure printprimes;var i : integer
;

nprinted : integer
;

begin
  i
   := 2

  ;
  nprinted
   := 0

  ;
  while i
   <= limit
   do begin
if prime
  [i
  ]
  then
  begin
if (nprinted
   > 0
  )
  andToken
  (nprinted
  modToken
  10
   = 0
  )
  then
  write(eol
  )

  ;
  p4(i
  )
  ;
  nprinted
   := nprinted
   + 1

  ;

  end

  ;
  i
   := i
   + 1

  ;

  end
  ;
  write(eol
  )

end
;
begin
  i
   := 2

  ;
  while i
   <= limit
   do begin
prime
  [i
  ]
   := true

  ;
  i
   := i
   + 1


  end
  ;
  findprimes
  ;
  printprimes
  ;

end
.
